using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System;
using System.Net;
using System.Threading;
using System.IO;


namespace Makist.Vision
{
	[AddComponentMenu("Makist/Vision/NetCamera")]
	public class NetCamera : MonoBehaviour
	{
		public string ipAddress;
		public string port;
		public string parameter;
		public RenderTexture targetTexture;

		private bool _playing = false;
		private const int INITIAL_BYTE_BUFFER_SIZE = 131072;
		private const int MAX_BYTE_BUFFER_SIZE = 1048576;
		private Texture2D _texture;
		private byte[] _frame = null;
		private bool _refresh = false;
		private bool _locker = false;

		void Awake()
		{
			_texture = new Texture2D(4, 4, TextureFormat.RGB24, false);
		}

		// Use this for initialization
		void Start ()
		{            
		}

		// Update is called once per frame
		void Update ()
		{
			if(_playing && _refresh && !_locker)
			{
				_locker = true;
				_texture.LoadImage(_frame);
				if(targetTexture != null)
					Graphics.Blit(_texture, targetTexture);
				_locker = false;
				_refresh = false;
			}
		}

		void OnDestroy()
		{
			_playing = false;
		}

		public bool isPlaying
		{
			get
			{
				return _playing;
			}
		}

		public void Play()
		{
			Thread thread = new Thread(RunThread);
			thread.Start();
		}

		public void Stop()
		{
			_playing = false;
		}

		private void RunThread()
		{
			#if UNITY_ANDROID
			AndroidJNI.AttachCurrentThread();
			#endif

			Stream stream = null;
			string url = string.Format("http://{0}", ipAddress);
			if(port.Length > 0)
				url += string.Format(":{0}", port);
			if(parameter.Length > 0)
				url += string.Format("/{0}", parameter);
			
			try
			{
				HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
				request.Method = "GET";
				request.ContentType = "image/png,image/*;q=0.8,*"+"/*;q=0.5";
				request.Timeout = 3000;

				HttpWebResponse response = (HttpWebResponse)request.GetResponse();
				stream = response.GetResponseStream();
				BinaryReader reader = new BinaryReader(new BufferedStream (stream), new System.Text.ASCIIEncoding());

				List<byte> byteBuf = new List<byte> (INITIAL_BYTE_BUFFER_SIZE);
				int s = 0;
				bool frameStarted = false;
				_refresh = false;
				_locker = false;
				_playing = true;
				while(_playing)
				{
					byte c = reader.ReadByte();

					if (frameStarted)
					{
						// if the current frame we are reading is just too large, then drop it.
						// there's something wrong, possibly on sender side.
						if (byteBuf.Count > MAX_BYTE_BUFFER_SIZE)
						{
							byteBuf.Clear();
							frameStarted = false;
							// @todo log corrupt data discard
						}
						else
						{
							byteBuf.Add(c);
						}
					}

					if(s == 0)
					{
						if (c == 0xFF)
						{
							s = 1;                            
						}							
					}
					else if(s == 1)
					{
						if (c == 0xD8) // JPEG start marker
						{
							byteBuf.Clear();
							byteBuf.Add(0xFF);
							byteBuf.Add(0xD8);
							frameStarted = true;
						}
						else if (c == 0xD9) // JPEG end marker
						{
							while(_locker)
								Thread.Sleep(1);

							_locker = true;

							// Decode frame
							int app0Pos = -1;
							for(int i=1; i<byteBuf.Count; i++)
							{
								if(byteBuf[i - 1] == 0xFF && byteBuf[i] == 0xE0)
								{
									app0Pos = i - 1;
									break;
								}
							}
							bool needToAddDHT = app0Pos >= 0 &&
								byteBuf[app0Pos + 4] == 'A' &&
								byteBuf[app0Pos + 5] == 'V' &&
								byteBuf[app0Pos + 6] == 'I' &&
								byteBuf[app0Pos + 7] == '1';

							if(needToAddDHT)
							{
								// Find where to insert MJPEG DHT, let it be right before SOS marker.
								int sosPos = -1;
								for(int i=1; i<byteBuf.Count; i++)
								{
									if(byteBuf[i - 1] == 0xFF && byteBuf[i] == 0xDA)
									{
										app0Pos = i - 1;
										break;
									}
								}
								if (sosPos >= 0)
								{
									// make room for huffman table and then copy it over, it includes marker bytes too
									byteBuf.InsertRange(sosPos, mjpegDefaultDHT);
								}

							}
							_frame = (byte[])byteBuf.ToArray();

							_locker = false;
							_refresh = true;
							frameStarted = false;
							Thread.Sleep(1);
						}
						s = 0;
					}
				}
			}
			catch (Exception e)
			{
				Debug.Log(e);
			}

			_playing = false;
			if (stream != null)
				stream.Close();

			#if UNITY_ANDROID
			AndroidJNI.DetachCurrentThread();
			#endif
		}

		static byte[] mjpegDefaultDHT = new byte[]
		{
			0xff, 0xc4, 0x01, 0xa2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
			0x0b, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x10, 0x00,
			0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7d, 0x01,
			0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22,
			0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24,
			0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28, 0x29,
			0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a,
			0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a,
			0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a,
			0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8,
			0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6,
			0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2, 0xe3,
			0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9,
			0xfa, 0x11, 0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00, 0x01,
			0x02, 0x77, 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07,
			0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33,
			0x52, 0xf0, 0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19,
			0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46,
			0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66,
			0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85,
			0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3,
			0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
			0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
			0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,
			0xf7, 0xf8, 0xf9, 0xfa
		};
	}
}
